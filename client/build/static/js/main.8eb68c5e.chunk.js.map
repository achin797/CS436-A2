{"version":3,"sources":["components/Messages.js","actions/index.js","components/MessageList.js","reducers/index.js","index.js"],"names":["Detail","_ref","text","onChange","react_default","a","createElement","className","Messages","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dialogText","createMessage","bind","assertThisInitialized","updateDialog","item","_this2","onClick","key","e","deleteMessage","delete","stopPropagation","setState","listItems","entries","map","Component","updateMessages","message","type","payload","MessageList","callBackendAPI","asyncToGenerator","regenerator_default","mark","_callee","response","body","wrap","_context","prev","next","fetch","method","sent","json","status","Error","abrupt","stop","addItem","isLoading","then","res","i","length","addMessage","catch","err","console","log","_this3","_inputElement","value","newItem","Date","now","postMessage","items","preventDefault","_this4","deleteMessageExpress","_this5","onSubmit","ref","components_Messages","connect","dispatch","headers","Content-Type","JSON","stringify","messages","error","apiUrl","initialState","combineReducers","arguments","undefined","action","concat","store","createStore","reducers","applyMiddleware","thunk","destination","document","querySelector","ReactDOM","render","es","src_components_MessageList"],"mappings":"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","file":"static/js/main.8eb68c5e.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\n//import Detail from \"./Detail\";\n\nclass Messages extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dialogText: ''\n        };\n\n        this.createMessage = this.createMessage.bind(this);\n        this.updateDialog = this.updateDialog.bind(this);\n    }\n\n    createMessage(item) {\n        return (<div className={\"theMessage\"}>\n            <li onClick={() => this.updateDialog(item.text)} key={item.key}>{item.text}\n                <button onClick={e => this.deleteMessage(item.key, item.text, e)} className={\"deleteButton\"}>X</button>\n            </li>\n        </div>);\n    }\n\n    deleteMessage(key, text, e) {\n        this.props.delete(key);\n        if (this.state.dialogText === text) {\n            this.updateDialog(\"\")\n        }\n        e.stopPropagation();\n    }\n\n\n    updateDialog(text) {\n        this.setState({\n            dialogText: text\n        });\n    }\n\n    render() {\n        var messageEntries = this.props.entries;\n        var listItems = messageEntries.map(this.createMessage);\n\n        return (\n            <div>\n                <ul className=\"theList\">\n                    {listItems}\n                </ul>\n                <Detail text={this.state.dialogText} onChange={this.updateDialog}/>\n            </div>\n        );\n    }\n}\n\n\n// Used https://stackoverflow.com/questions/51587598/how-to-re-render-in-a-react-functional-component-according-to-a-onchange\n// Ask the TA why this works.\n\nfunction Detail({text, onChange}) {\n    return (\n        <section onChange={onChange} className=\"theDialog\">\n            <h1>\n                {text}\n            </h1>\n            <article>\n                {text}\n            </article>\n        </section>\n    );\n}\n\nexport default Messages;","const apiUrl = '/express_backend';\n\n//For initial load of the client\nexport const addMessage = message => {\n    return {\n        type: 'ADD_MESSAGE',\n        payload: message,\n    };\n};\n\nexport const postMessage = message => {\n    return (dispatch) => {\n        return fetch(apiUrl, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(message)\n        }).then(response => {\n            response.json()\n                .then(messages => {\n                    dispatch(updateMessages(messages))\n                })\n                .catch(error => {\n                    throw(error);\n                })\n        })\n            .catch(error => {\n                throw(error);\n            });\n    };\n};\n\nexport const updateMessages = message => {\n    return {\n        type: 'UPDATE_MESSAGES',\n        payload: message,\n    };\n};\n\nexport const deleteMessageExpress = item => {\n    return (dispatch) => {\n        return fetch(apiUrl + '/' + item, {\n            method: 'DELETE'\n        }).then(response => {\n            response.json()\n                .then(messages => {\n                    dispatch(updateMessages(messages))\n                })\n                .catch(error => {\n                    throw(error);\n                })\n        })\n            .catch(error => {\n                throw(error);\n            });\n    };\n};","/*\nStarted off the assignment with https://bit.ly/2Wr10yi as template\n */\n\nimport React, {Component} from \"react\";\nimport {connect} from \"react-redux\";\nimport Messages from \"./Messages\";\nimport \"./MessageList.css\";\nimport {addMessage, postMessage, deleteMessageExpress} from \"../actions\";\n\nclass MessageList extends Component {\n\n    componentDidMount() {\n        // Call our fetch function below once the component mounts\n        this.callBackendAPI()\n            .then((res) => {\n                for (var i = 0; i < res.length; i++) {\n                    //THIS IS BAD! PLEASE CHANGE IT ACHIN!\n                    if (res[i]) {\n                        this.props.addMessage(res[i]);\n                        this.setState({isLoading: false})\n                    }\n                }\n            })\n            .catch(err => console.log(err));\n\n    }\n\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n    callBackendAPI = async () => {\n        const response = await fetch('/express_backend', {method: 'GET'});\n        const body = await response.json();\n\n        if (response.status !== 200) {\n            throw Error(body.message)\n        }\n        return body;\n    };\n\n    constructor(props) {\n        super(props);\n        this.addItem = this.addItem.bind(this);\n        this.deleteMessage = this.deleteMessage.bind(this);\n        this.state = {isLoading: true};\n    }\n\n    addItem(e) {\n        if (this._inputElement.value !== \"\") {\n            this.setState({isLoading: true});\n            var newItem = {\n                text: this._inputElement.value,\n                key: Date.now()\n            };\n\n            this.props.postMessage(newItem).then(() => {\n                    this.setState({isLoading: false})\n                }\n            );\n            this._inputElement.value = \"\";\n        }\n\n        //doesn't immediately get logged\n        console.log(this.props.items);\n\n        e.preventDefault();\n    }\n\n    deleteMessage(key) {\n        this.setState({isLoading: true});\n        this.props.deleteMessageExpress(key).then(() => {\n            this.setState({isLoading: false});\n        });\n    }\n\n    render() {\n        if (this.state.isLoading) {\n            return (\n                <div className=\"messageListMain\">\n                    <div className=\"loader\">\n                        <div className=\"loader-icon\"></div>\n                        <div className=\"loader-text\">the server is super slow</div>\n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"messageListMain\">\n                <div className=\"header\">\n                    <form onSubmit={this.addItem}>\n                        <input ref={(a) => this._inputElement = a}>\n                        </input>\n                        <button type=\"submit\">add</button>\n                    </form>\n                </div>\n                <Messages entries={this.props.items}\n                          delete={this.deleteMessage}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => { //name is by convention\n    //state has entire state of app!!\n    return {items: state.items}; //now it will appear as props\n};\n\n\nexport default connect(mapStateToProps, {addMessage, postMessage, deleteMessageExpress})(MessageList);","import {combineReducers} from 'redux';\n\nconst initialState = [];\nconst messageReducer = (items = initialState, action) => {\n    if (action.type === 'ADD_MESSAGE') {\n        return items.concat(action.payload);\n    }\n\n    if(action.type === 'UPDATE_MESSAGES'){\n        return action.payload;\n    }\n\n    return items;\n};\n\nexport default combineReducers({\n    //spent literally hours what went wrong. CHANGED messageReducer() to messageReducer and voila\n    items: messageReducer,\n});","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport MessageList from \"./components/MessageList\";\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport reducers from './reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nvar destination = document.querySelector(\"#container\");\n\nReactDOM.render(\n    <div>\n        <Provider store={store}>\n            <MessageList/>\n        </Provider>\n    </div>\n    ,\n    destination\n);"],"sourceRoot":""}